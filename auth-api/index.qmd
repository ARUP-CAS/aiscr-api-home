---
title: "AMCR Authentication API"
subtitle: OpenArchives Initiative Protocol for Metadata Harvesting API
date: 2025-03-26
---

# AMCR Authentication API Documentation

## Overview
This documentation provides details for the AMCR Authentication API, which includes token authentication and user information retrieval.

## Variables
| Variable | Description | Default Value |
|----------|-------------|---------------|
| `amcr_url` | Base URL for the API | - |
| `amcr_user` | Username for authentication | - |
| `amcr_password` | Password for authentication | - |
| `token` | Bearer token for authenticated requests | (empty) |

## Endpoints

### 1. Obtain Authentication Token
- **Method**: POST
- **Endpoint**: `/api/token-auth/`

#### Request Body
```json
{
    "username": "string",
    "password": "string"
}
```

#### Parameters
| Name | Type | Description | Required |
|------|------|-------------|----------|
| username | string | User's username | Yes |
| password | string | User's password | Yes |

#### Example Request
```python
import requests

base_url = "https://your-amcr-url.com"
username = "your_username"
password = "your_password"

response = requests.post(
    f"{base_url}/api/token-auth/",
    json={
        "username": username,
        "password": password
    }
)

# Extract token from response
token = response.json()['token']
```

### 2. Get User Information
- **Method**: GET
- **Endpoint**: `/api/uzivatel-info/`
- **Authentication**: Bearer Token

#### Headers
| Name | Value | Description |
|------|-------|-------------|
| Authorization | Bearer {token} | Authentication token obtained from token-auth endpoint |

#### Example Request
```python
import requests

base_url = "https://your-amcr-url.com"
token = "your_obtained_token"

headers = {
    "Authorization": f"Bearer {token}"
}

response = requests.get(
    f"{base_url}/api/uzivatel-info/",
    headers=headers
)

# Access user information
user_info = response.json()
```

## Authentication Flow
1. Request an authentication token by sending username and password to `/api/token-auth/`
2. Receive a bearer token in the response
3. Use the token in the Authorization header for subsequent API requests
4. Retrieve user information using the `/api/uzivatel-info/` endpoint

## Error Handling

### Common Error Codes
| Code | Description | Possible Cause |
|------|-------------|----------------|
| 400 | Bad Request | Invalid request format |
| 401 | Unauthorized | Invalid credentials or expired token |
| 403 | Forbidden | Insufficient permissions |

## Best Practices
- Securely store and transmit credentials
- Refresh tokens before they expire
- Handle authentication errors gracefully
- Use HTTPS for all authentication requests
- Do not share tokens or store them in client-side storage

## Notes
- Tokens are typically short-lived and may require periodic renewal
- Each token is unique to the user and authentication session

## Support
For additional assistance, contact the AMCR technical support team.
